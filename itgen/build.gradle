plugins {
    id 'java'
    id "io.spring.dependency-management" version "1.0.0.RC2"
}

group 'test1'
version '1.0-SNAPSHOT'

sourceSets.main.output.resourcesDir = sourceSets.test.java.outputDir
sourceSets.test.output.resourcesDir = sourceSets.test.java.outputDir

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

configurations {
    agent
}

dependencies {
    implementation 'org.testng:testng:7.1.0'
    implementation 'org.seleniumhq.selenium:selenium-java:3.141.59'
    implementation 'org.hamcrest:hamcrest:2.2'
    implementation 'com.beust:jcommander:1.78'
    implementation 'com.thoughtworks.xstream:xstream:1.4.11.1'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'ch.qos.logback:logback-classic:1.2.3'

    compile group: 'org.hibernate.ogm', name: 'hibernate-ogm-mongodb'
    compile group: 'org.jboss.jbossts', name: 'jbossjta'
    compile group: 'org.hibernate', name: 'hibernate-search-orm'

    agent "org.aspectj:aspectjweaver:1.8.0"
    compile "ru.yandex.qatools.allure:allure-testng-adaptor:1.4.0.RC4"
}

dependencyManagement {
    imports {
        mavenBom('org.hibernate.ogm:hibernate-ogm-bom:4.2.0.Final')
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}



/** описание задачи и пробросы системных свойств через сборщик в запускаемую JVM  */

//
task testFamilies(type: Test) {
    useTestNG {
        suites 'src/test/resources/testng-families.xml'
    }
    if(project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if(project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
    if(project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
    if(project.hasProperty('verifyUi')) {
        systemProperty 'verifyUi', "${verifyUi}"
    }
}

testFamilies.doFirst {
    jvmArgs "-javaagent:${configurations.agent.singleFile}"
}
//

task testParents(type: Test) {
    useTestNG {
        suites 'src/test/resources/testng-parents.xml'
    }
    if(project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if(project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
    if(project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
    if(project.hasProperty('verifyUi')) {
        systemProperty 'verifyUi', "${verifyUi}"
    }
}

testParents.doFirst {
    jvmArgs "-javaagent:${configurations.agent.singleFile}"
}
//

task testStudents(type: Test) {
    useTestNG {
        suites 'src/test/resources/testng-students.xml'
    }
    if(project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if(project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
    if(project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
    if(project.hasProperty('verifyUi')) {
        systemProperty 'verifyUi', "${verifyUi}"
    }
}

testStudents.doFirst {
    jvmArgs "-javaagent:${configurations.agent.singleFile}"
}
//

task testTrainers(type: Test) {
    useTestNG {
        suites 'src/test/resources/testng-trainers.xml'
    }
    if(project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if(project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
    if(project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
    if(project.hasProperty('verifyUi')) {
        systemProperty 'verifyUi', "${verifyUi}"
    }
}

testTrainers.doFirst {
    jvmArgs "-javaagent:${configurations.agent.singleFile}"
}
//

task testWorkers(type: Test) {
    useTestNG {
        suites 'src/test/resources/testng-workers.xml'
    }
    if(project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if(project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
    if(project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
    if(project.hasProperty('verifyUi')) {
        systemProperty 'verifyUi', "${verifyUi}"
    }
}

testWorkers.doFirst {
    jvmArgs "-javaagent:${configurations.agent.singleFile}"
}
//


