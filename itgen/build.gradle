plugins {
    id 'java'
    id 'project-report'
}

group 'test1'
version '1.0-SNAPSHOT'

sourceSets.main.output.resourcesDir = sourceSets.test.java.outputDir
sourceSets.test.output.resourcesDir = sourceSets.test.java.outputDir

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

configurations {
    agent
}

dependencies {
    implementation 'org.testng:testng:7.1.0'
    implementation 'org.seleniumhq.selenium:selenium-java:3.141.59'
    implementation 'org.hamcrest:hamcrest:2.2'
    implementation 'com.beust:jcommander:1.78'
    implementation 'com.thoughtworks.xstream:xstream:1.4.11.1'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'joda-time:joda-time:2.10.6'
    compile group: 'commons-net', name: 'commons-net', version: '3.6'
    compile 'ru.lanwen.verbalregex:java-verbal-expressions:1.4'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.3.4'
    compile 'org.subethamail:subethasmtp:3.1.7'

    compile 'dev.morphia.morphia:core:1.5.8'
    implementation 'org.mongodb:mongo-java-driver:3.12.4'

    agent "org.aspectj:aspectjweaver:1.8.0"
    compile "ru.yandex.qatools.allure:allure-testng-adaptor:1.4.0.RC4"

    implementation 'ru.yandex.qatools.ashot:ashot:1.5.4'

}

// решение проблемы:
// SLF4J: Class path contains multiple SLF4J bindings
// log4j:WARN No appenders could be found for logger (org.jboss.logging)

configurations.all {
    exclude(group: "org.slf4j", module: "slf4j-simple")
    exclude(group: "log4j", module: "log4j")
}

//

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


/** описание задачи и пробросы системных свойств через сборщик в запускаемую JVM  */
//
task testFamilies(type: Test) {
    useTestNG {
        suites 'src/test/resources/testng-families.xml'
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if (project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
    if (project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
    if (project.hasProperty('verifyUI')) {
        systemProperty 'verifyUI', "${verifyUI}"
    }
    if (project.hasProperty('videoName')) {
        systemProperty 'videoName', "${videoName}"
    }
}

testFamilies.doFirst {
    jvmArgs "-javaagent:${configurations.agent.singleFile}"
}

//
task testParents(type: Test) {
    useTestNG {
        suites 'src/test/resources/testng-parents.xml'
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if (project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
    if (project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
    if (project.hasProperty('verifyUI')) {
        systemProperty 'verifyUI', "${verifyUI}"
    }
    if (project.hasProperty('videoName')) {
        systemProperty 'videoName', "${videoName}"
    }
}

testParents.doFirst {
    jvmArgs "-javaagent:${configurations.agent.singleFile}"
}

//
task testStudents(type: Test) {
    useTestNG {
        suites 'src/test/resources/testng-students.xml'
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if (project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
    if (project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
    if (project.hasProperty('verifyUI')) {
        systemProperty 'verifyUI', "${verifyUI}"
    }
    if (project.hasProperty('videoName')) {
        systemProperty 'videoName', "${videoName}"
    }
}

testStudents.doFirst {
    jvmArgs "-javaagent:${configurations.agent.singleFile}"
}

//
task testTrainers(type: Test) {
    useTestNG {
        suites 'src/test/resources/testng-trainers.xml'
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if (project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
    if (project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
    if (project.hasProperty('verifyUI')) {
        systemProperty 'verifyUI', "${verifyUI}"
    }
    if (project.hasProperty('videoName')) {
        systemProperty 'videoName', "${videoName}"
    }
}

testTrainers.doFirst {
    jvmArgs "-javaagent:${configurations.agent.singleFile}"
}

//
task testWorkers(type: Test) {
    useTestNG {
        suites 'src/test/resources/testng-workers.xml'
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if (project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
    if (project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
    if (project.hasProperty('verifyUI')) {
        systemProperty 'verifyUI', "${verifyUI}"
    }
    if (project.hasProperty('videoName')) {
        systemProperty 'videoName', "${videoName}"
    }
}

testWorkers.doFirst {
    jvmArgs "-javaagent:${configurations.agent.singleFile}"
}

//
task testLeads(type: Test) {
    useTestNG {
        suites 'src/test/resources/testng-leads.xml'
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if (project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
    if (project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
    if (project.hasProperty('verifyUI')) {
        systemProperty 'verifyUI', "${verifyUI}"
    }
    if (project.hasProperty('videoName')) {
        systemProperty 'videoName', "${videoName}"
    }
}

testLeads.doFirst {
    jvmArgs "-javaagent:${configurations.agent.singleFile}"
}

//
task testScreenShots(type: Test) {
    useTestNG {
        suites 'src/test/resources/testng-screenShots.xml'
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if (project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
    if (project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
    if (project.hasProperty('etalon')) {
        systemProperty 'etalon', "${etalon}"
    }
    if (project.hasProperty('videoName')) {
        systemProperty 'videoName', "${videoName}"
    }

}
testScreenShots.doFirst {
    jvmArgs "-javaagent:${configurations.agent.singleFile}"
}

//
task testSchedule(type: Test) {
    useTestNG {
        suites 'src/test/resources/testng-schedule.xml'
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if (project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
    if (project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
    if (project.hasProperty('verifyUI')) {
        systemProperty 'verifyUI', "${verifyUI}"
    }
    if (project.hasProperty('videoName')) {
        systemProperty 'videoName', "${videoName}"
    }

}
testSchedule.doFirst {
    jvmArgs "-javaagent:${configurations.agent.singleFile}"
}
//
//
task testWindowsSchedule(type: Test) {
    useTestNG {
        suites 'src/test/resources/testng-windowsSchedule.xml'
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if (project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
    if (project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
    if (project.hasProperty('verifyUI')) {
        systemProperty 'verifyUI', "${verifyUI}"
    }
    if (project.hasProperty('videoName')) {
        systemProperty 'videoName', "${videoName}"
    }

}
testWindowsSchedule.doFirst {
    jvmArgs "-javaagent:${configurations.agent.singleFile}"
}
//

task testNostable(type: Test) {
    useTestNG {
        suites 'src/test/resources/testng-nostable.xml'
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if (project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
    if (project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
    if (project.hasProperty('verifyUI')) {
        systemProperty 'verifyUI', "${verifyUI}"
    }
    if (project.hasProperty('videoName')) {
        systemProperty 'videoName', "${videoName}"
    }

}
testNostable.doFirst {
    jvmArgs "-javaagent:${configurations.agent.singleFile}"
}

//
task testRequests(type: Test) {
    useTestNG {
        suites 'src/test/resources/testng-requests.xml'
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if (project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
    if (project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
    if (project.hasProperty('verifyUI')) {
        systemProperty 'verifyUI', "${verifyUI}"
    }
    if (project.hasProperty('videoName')) {
        systemProperty 'videoName', "${videoName}"
    }

}
testRequests.doFirst {
    jvmArgs "-javaagent:${configurations.agent.singleFile}"
}
//

task testSmoke(type: Test) {
    useTestNG {
        suites 'src/test/resources/testng-smoke.xml'
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if (project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
    if (project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
    if (project.hasProperty('verifyUI')) {
        systemProperty 'verifyUI', "${verifyUI}"
    }
    if (project.hasProperty('videoName')) {
        systemProperty 'videoName', "${videoName}"
    }

}
testSmoke.doFirst {
    jvmArgs "-javaagent:${configurations.agent.singleFile}"
}
//
task testFirst(type: Test) {
    useTestNG {
        suites 'src/test/resources/testng-first.xml'
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if (project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
    if (project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
    if (project.hasProperty('verifyUI')) {
        systemProperty 'verifyUI', "${verifyUI}"
    }
    if (project.hasProperty('videoName')) {
        systemProperty 'videoName', "${videoName}"
    }
}
    testFirst.doFirst {
        jvmArgs "-javaagent:${configurations.agent.singleFile}"
    }

    //
    task testSmokeParent(type: Test) {
        useTestNG {
            suites 'src/test/resources/testng-smoke-parent.xml'
        }
        if (project.hasProperty('browser')) {
            systemProperty 'browser', "${browser}"
        }
        if (project.hasProperty('platform')) {
            systemProperty 'platform', "${platform}"
        }
        if (project.hasProperty('target')) {
            systemProperty 'target', "${target}"
        }
        if (project.hasProperty('verifyUI')) {
            systemProperty 'verifyUI', "${verifyUI}"
        }
        if (project.hasProperty('videoName')) {
            systemProperty 'videoName', "${videoName}"
        }
    }
        testSmokeParent.doFirst {
            jvmArgs "-javaagent:${configurations.agent.singleFile}"
        }

    //
task testNostableParent(type: Test) {
    useTestNG {
        suites 'src/test/resources/testng-nostable_par.xml'
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if (project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
    if (project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
    if (project.hasProperty('verifyUI')) {
        systemProperty 'verifyUI', "${verifyUI}"
    }
    if (project.hasProperty('videoName')) {
        systemProperty 'videoName', "${videoName}"
    }
}
    testNostableParent.doFirst {
        jvmArgs "-javaagent:${configurations.agent.singleFile}"
    }


//
task testScreenShotsPar(type: Test) {
   useTestNG {
        suites 'src/test/resources/testng-sshotsPar.xml'
   }
   if (project.hasProperty('browser')) {
       systemProperty 'browser', "${browser}"
   }
   if (project.hasProperty('platform')) {
       systemProperty 'platform', "${platform}"
   }
   if (project.hasProperty('target')) {
       systemProperty 'target', "${target}"
   }
   if (project.hasProperty('verifyUI')) {
      systemProperty 'verifyUI', "${verifyUI}"
   }
    if (project.hasProperty('videoName')) {
        systemProperty 'videoName', "${videoName}"
    }
}
   testScreenShotsPar.doFirst {
       jvmArgs "-javaagent:${configurations.agent.singleFile}"
   }

//
task testMaterials(type: Test) {
    useTestNG {
        suites 'src/test/resources/testng-materials.xml'
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if (project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
    if (project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
    if (project.hasProperty('verifyUI')) {
        systemProperty 'verifyUI', "${verifyUI}"
    }
    if (project.hasProperty('videoName')) {
        systemProperty 'videoName', "${videoName}"
    }
}
testMaterials.doFirst {
    jvmArgs "-javaagent:${configurations.agent.singleFile}"
}

//
task testLkParent(type: Test) {
    useTestNG {
        suites 'src/test/resources/testng-lkParent.xml'
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if (project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
    if (project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
    if (project.hasProperty('verifyUI')) {
        systemProperty 'verifyUI', "${verifyUI}"
    }
    if (project.hasProperty('videoName')) {
        systemProperty 'videoName', "${videoName}"
    }
}
testLkParent.doFirst {
    jvmArgs "-javaagent:${configurations.agent.singleFile}"
}

task testPayments(type: Test) {
    useTestNG {
        suites 'src/test/resources/testng-payments.xml'
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if (project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
    if (project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
    if (project.hasProperty('verifyUI')) {
        systemProperty 'verifyUI', "${verifyUI}"
    }
    if (project.hasProperty('videoName')) {
        systemProperty 'videoName', "${videoName}"
    }
}
testPayments.doFirst {
    jvmArgs "-javaagent:${configurations.agent.singleFile}"
}
//
task testNotDockerAdmin(type: Test) {
    useTestNG {
        suites 'src/test/resources/testng-not-docker-admin.xml'
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if (project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
    if (project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
    if (project.hasProperty('verifyUI')) {
        systemProperty 'verifyUI', "${verifyUI}"
    }
    if (project.hasProperty('videoName')) {
        systemProperty 'videoName', "${videoName}"
    }
}
testNotDockerAdmin.doFirst {
    jvmArgs "-javaagent:${configurations.agent.singleFile}"
}

//
task testNotDockerParent(type: Test) {
    useTestNG {
        suites 'src/test/resources/testng-not-docker-parent.xml'
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if (project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
    if (project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
    if (project.hasProperty('verifyUI')) {
        systemProperty 'verifyUI', "${verifyUI}"
    }
    if (project.hasProperty('videoName')) {
        systemProperty 'videoName', "${videoName}"
    }
}
testNotDockerParent.doFirst {
    jvmArgs "-javaagent:${configurations.agent.singleFile}"
}

